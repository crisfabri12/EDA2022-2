#include <vector> // without .h
#include <list>
#include <iostream>
using namespace std;

class CMyComplexDataStructure
{
	vector<float> m_container;
public:
	void Insert(float fVal) { m_container.push_back(fVal); }
	
	template <typename objclass>
	void sumone(objclass funobj)
	{
		vector<float>::iterator iter = m_container.begin();
		for (; iter != m_container.end() ; iter++){
			funobj(*iter);
		}
			
		
	}
	
	int size(){
		return this->m_container.size();
	}
		
	float get(int x){
		return this->m_container[x];
	}
		
};
template <typename objclass>
class funcobjclass
{
public:
	void operator ()(objclass& objinstance)
	{
		objinstance++;
	}
};
int main(int argc, char* argv[])
{
	CMyComplexDataStructure ds;
	ds.Insert(3.5);
	ds.Insert(4.5);
	ds.Insert(6.5);
	ds.Insert(3.9);
	funcobjclass<float> x;
	ds.sumone(x);
	
	for(int i = 0; i < ds.size(); i++){
		cout<<ds.get(i)<< " " <<endl;
	}
	
	return 0;
}
